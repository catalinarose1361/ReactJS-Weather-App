{"version":3,"sources":["components/Logo/Logo.module.css","components/Forecast/Forecast.module.css","components/Conditions/Conditions.module.css","components/Conditions/Conditions.js","components/Forecast/Forecast.js","components/Logo/Logo.js","App.js","index.js"],"names":["module","exports","Conditions","props","className","classes","Wrapper","error","Small","loading","Loader","responseObj","cod","name","Math","round","main","temp","weather","description","Forecast","useState","setResponseObj","city","setCity","unit","setUnit","setError","setLoading","uriEncodedCity","encodeURIComponent","apiUrl","process","onSubmit","e","preventDefault","length","fetch","then","response","json","Error","catch","err","console","log","message","type","placeholder","maxLength","value","textInput","onChange","target","Radio","checked","Button","Logo","sky","circle","cloud1","cloud2","cloud3","App","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff80f637.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"circle\":\"Logo_circle__2ACV3\",\"sky\":\"Logo_sky__3siX9\",\"cloud1\":\"Logo_cloud1__28Qj1\",\"cloud2\":\"Logo_cloud2__2lzsh\",\"cloud3\":\"Logo_cloud3__1HnkX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextInput\":\"Forecast_TextInput__2ur0J\",\"Radio\":\"Forecast_Radio__1Ejlt\",\"Button\":\"Forecast_Button__3Y_IL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__1WUTs\",\"Small\":\"Conditions_Small__1VrqO\",\"Loader\":\"Conditions_Loader__PcSFJ\",\"spin\":\"Conditions_spin__b05Or\"};","import React from 'react';\nimport classes from './Conditions.module.css'\n\nconst Conditions = (props) => {\n\n    return (\n\n        <div className={classes.Wrapper}>\n\n            {props.error && <small className={classes.Small}>Please enter a valid city.</small>}\n\n            {props.loading && <div className={classes.Loader}>Loading...</div>}\n\n            {/* DISPLAY THIS DATA ONLY WHEN THE HTTP RESPONSE CODE IS 200 (SUCESSFUL) */}\n            {props.responseObj.cod === 200 ? \n\n                <div>\n\n                    {/* DISPLAYS CITY NAME */}\n                    <p><strong>{props.responseObj.name}</strong></p>\n\n                    {/*  Math.round() RETURNS A SUPPLIED NUMERIC EXPRESSION ROUNDED TO THE NEAREST INTEGER. */}\n                    <p>It is currently {Math.round(props.responseObj.main.temp)} degrees</p>\n\n                    {/* DISPLAYS WEATHER DESCRIPTION */}\n                    <p>{props.responseObj.weather[0].description}</p>\n\n                </div>\n\n            : null }\n\n        </div>\n    )\n}\n\nexport default Conditions;","import React, { useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css';\n\nconst Forecast = () => {\n\n    //EXAMPLE responseObj FOR THE CITY OF DENVER\n    //{\"coord\":{\"lon\":-104.9847,\"lat\":39.7392},\"weather\":[{\"id\":804,\"main\":\"Clouds\",\"description\":\"overcast clouds\",\"icon\":\"04d\"}],\"base\":\"stations\",\"main\":{\"temp\":305.65,\"feels_like\":303.49,\"temp_min\":296.88,\"temp_max\":307.95,\"pressure\":1009,\"humidity\":18},\"visibility\":10000,\"wind\":{\"speed\":0.45,\"deg\":69,\"gust\":1.34},\"clouds\":{\"all\":100},\"dt\":1626468937,\"sys\":{\"type\":2,\"id\":2004334,\"country\":\"US\",\"sunrise\":1626435920,\"sunset\":1626488779},\"timezone\":-21600,\"id\":5419384,\"name\":\"Denver\",\"cod\":200}\n    let [responseObj, setResponseObj] = useState({});\n\n    let [city, setCity] = useState('');\n\n    let [unit, setUnit] = useState('imperial');\n\n    let [error, setError] = useState(false);\n\n    let [loading, setLoading] = useState(false);\n\n    const uriEncodedCity = encodeURIComponent(city)\n\n    const apiUrl = `http://api.openweathermap.org/data/2.5/weather?units=${unit}&q=${uriEncodedCity}&appid=${process.env.REACT_APP_API_KEY}`\n\n   function getForecast(e) {\n\n    // PREVENTS THE PAGE FROM REFRESHING AFTER CLICKING 'GET FORECAST' BUTTON\n    e.preventDefault();\n\n    //IF THE USER DOESNT ENTER ANY CHAR IN THE INPUT, DONT REQUEST\n    if (city.length === 0) {\n        return setError(true);\n    }\n\n    // Clear state in preparation for new data\n   setError(false);\n   setResponseObj({});\n  \n   setLoading(true);\n\n\n\n    fetch(apiUrl)\n\n    //CONVERTS THE RESPONSE INTO A JSON OBJECT \n    .then(response => response.json())\n\n    //AND THEN ASSIGN THE RESPONSE VALUE TO THE responseObj VARIABLE IN OUR STATE\n    .then(response => {\n\n        //THROW AN ERROR IF THE CODE ON THE RESPONSE IS NOT 200\n        if (response.cod !== 200) {\n\n            throw new Error()\n\n        }\n\n        setResponseObj(response);\n\n        setLoading(false);\n\n    }).catch(err => {\n\n        setError(true);\n\n        setLoading(false);\n\n        console.log(err.message);\n\n    });\n\n   }\n\n   return (\n\n    // JSX code will go here\n\n    <div>\n\n        <h2>Find Current Weather Conditions</h2>\n\n        <form onSubmit={getForecast}>\n\n            <input\n\n                type=\"text\"\n                placeholder=\"Enter City\"\n                maxLength=\"50\"\n                value={city}\n                className={classes.textInput}\n                onChange={(e) => setCity(e.target.value)}\n\n            />\n\n            <label className={classes.Radio}>\n\n                <input\n\n                    type=\"radio\"\n                    name=\"units\"\n                    checked={unit === \"imperial\"}\n                    value=\"imperial\"\n                    onChange={(e) => setUnit(e.target.value)}\n\n                />\n\n                Fahrenheit\n\n            </label>\n\n            <label className={classes.Radio}>\n\n                <input\n\n                    type=\"radio\"\n                    name=\"units\"\n                    checked={unit === \"metric\"}\n                    value=\"metric\"\n                    onChange={(e) => setUnit(e.target.value)}\n\n                />\n\n                Celcius\n\n            </label>\n\n            <button className={classes.Button} type=\"submit\">Get Forecast</button>\n\n        </form>\n\n\n        <Conditions \n\n            responseObj={responseObj}\n            error={error} \n            loading={loading}\n        \n        />\n\n    </div>\n\n   )\n\n}\n\nexport default Forecast;","import React from 'react';\nimport classes from \"./Logo.module.css\"\n\nconst Logo = () => (\n    <div className={classes.sky}>\n        <div className={classes.circle}/>\n        <div className={classes.cloud1} />\n        <div className={classes.cloud2} />\n        <div className={classes.cloud3} />\n    </div>\n)\n\nexport default Logo;","\nimport { React, useState, useEffect } from \"react\";\nimport './App.css';\nimport Forecast from \"./components/Forecast/Forecast\";\nimport Logo from './components/Logo/Logo';\n\nfunction App() {\n\n    return (\n        <>\n\n        <header className=\"App-header\">\n\n            <Logo />\n\n            <h1>React Weather App</h1>\n            \n        </header>\n\n        <main>\n\n            <Forecast />\n\n        </main>\n\n        <footer>\n\n            Application Developed By <a href=\"http://www.hirecatalina.com\">Catalina Williams</a>\n            \n        </footer>\n\n        </>\n\n    )\n\n\n}\n\nexport default App;\n\n//   const [api, setApi] = useState({});\n//   let [city, setCity] = useState('');\n//   const uriEncodedCity = encodeURIComponent(city);\n\n//   const apiUrl = `http://api.openweathermap.org/data/2.5/weather?q=${uriEncodedCity}&appid=e85d65f27c4dba6f1470e1cee950c874`\n//   useEffect(() => {\n\n//     fetch(apiUrl)\n//       .then((res) => res.json())\n//       .then((data) => setApi(data))\n      \n\n//   })\n\n\n\n//   return (\n//     <Grommet>\n//     <div className=\"App\">\n//       {/* <input name=\"city\" onChange={handleChange} value={search.city}></input> */}\n//      {/* <text>weather description goes here</text> */}\n   \n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Enter City\"\n//                     maxLength=\"50\"\n//                     value={city}\n//                     onChange={(e) => setCity(e.target.value)}\n//                     />\n\n\n                \n\n             \n\n           \n//      <h1>{JSON.stringify(api)}</h1>\n//     </div>\n//     </Grommet>\n//   );\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}